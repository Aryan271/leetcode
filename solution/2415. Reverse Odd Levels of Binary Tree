/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        queue<TreeNode*> q;
        queue<TreeNode*> q1;
        q.push(root);
        q1.push(root);
        int cnt = 0;
        while(!q.empty())
        {
            int n = q.size();
            vector<int> v;
            vector<TreeNode*> nodev;
            for(int i = 0; i < n; i++)
            {
                TreeNode* node = q.front();
                q.pop();
                if(node->left != NULL)
                q.push(node->left);
                if(node->right != NULL)
                q.push(node->right);
                if(node->left != NULL)
                v.push_back(node->left->val);
                if(node->right != NULL)
                v.push_back(node->right->val);
                if(node->left != NULL)
                nodev.push_back(node->left);
                if(node->right != NULL)
                nodev.push_back(node->right);
            }
            cout<<cnt<<endl;
            if(cnt % 2 == 0)
            {
                reverse(v.begin(), v.end());
                for(int i = 0; i < nodev.size(); i++)
                {
                    nodev[i]->val = v[i];
                }
            }
            cnt++;
        }
        return root;
    }
};
